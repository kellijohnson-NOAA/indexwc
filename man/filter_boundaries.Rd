% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter_boundaries.R
\name{filter_boundaries}
\alias{filter_boundaries}
\title{Eliminate boundaries that do not have any data in them or are duplicates}
\usage{
filter_boundaries(y, boundaries)
}
\arguments{
\item{y}{A vector of y-axis coordinates, i.e., latitude. Coordinates should
be in real values whether that is decimal degrees or m it does not matter
but they cannot be character values.}

\item{boundaries}{TODO document}
}
\value{
A data frame with two columns (i.e., \code{upper} and \code{lower}) is returned,
where the bad areas are removed. If the input vectors are named, then the
resulting rows of the returned data frame will also be named.
}
\description{
Eliminate boundaries that do not have any data in them or are duplicates
}
\details{
Sometimes boundaries can be exactly equal and therefore do not need
to be included in a set. Other times a boundary was initially valid but
because there were no observations in the southern or northern limits the
truncated boundary makes the area become exactly equal to another boundary.
This can often be the case when there are no southern observations and a
boundary becomes equal to the coastwide boundary. Sometimes a northern
boundary is further south than the southern boundary, which essentially is a
negative area. The opposite can also happen. All of the above constitute bad
boundaries.

Users often input perfectly fine boundaries but it is the truncation to only
positive tows, which is in effort to not predict to areas without
observations that leads to the boundary being bad.
}
\examples{
# Removes OR because there are only observations in WA and CA
filter_boundaries(y = c(34, 48), boundaries = boundaries_data)
# Shrinks northern borders and removes WA because no observations in WA
filter_boundaries(y = c(45.5, 34), boundaries = boundaries_data)
}
